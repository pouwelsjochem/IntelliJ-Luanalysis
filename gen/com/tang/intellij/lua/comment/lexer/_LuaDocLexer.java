/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xBODY = 2;
  public static final int xTAG = 4;
  public static final int xTAG_WITH_ID = 6;
  public static final int xTAG_NAME = 8;
  public static final int xCOMMENT_STRING = 10;
  public static final int xPARAM = 12;
  public static final int xPARAM_SUFFIX = 14;
  public static final int xTYPE = 16;
  public static final int xCLASS = 18;
  public static final int xCLASS_PARAMS = 20;
  public static final int xCLASS_PARAM_LIST = 22;
  public static final int xCLASS_EXTEND = 24;
  public static final int xFIELD = 26;
  public static final int xFIELD_ID = 28;
  public static final int xFIELD_VALUE = 30;
  public static final int xGENERIC = 32;
  public static final int xALIAS = 34;
  public static final int xALIAS_PARAMS = 36;
  public static final int xALIAS_PARAM_LIST = 38;
  public static final int xSUPPRESS = 40;
  public static final int xDOUBLE_QUOTED_STRING = 42;
  public static final int xSINGLE_QUOTED_STRING = 44;
  public static final int xBACKTICK_QUOTED_STRING = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 18560 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\25\1\61\1\62\5\21\2\25\1\63"+
    "\7\21\1\25\1\64\20\21\1\25\1\65\1\21\1\66\13\25\1\67\2\25\1\70\21\21\1\71"+
    "\1\72\4\21\1\73\11\21\1\74\1\75\1\76\1\77\1\21\1\100\2\21\1\101\1\102\2\21"+
    "\1\103\1\21\1\104\1\105\5\21\1\106\2\21\123\25\1\107\7\25\1\110\1\111\12\25"+
    "\1\112\15\25\1\113\6\21\1\25\1\114\2\21\11\25\1\115\u0576\21\1\116\u017f\21");

  /* The ZZ_CMAP_Y table has 5056 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\5\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24\1\51"+
    "\1\52\1\30\1\53\1\54\1\0\1\55\5\24\1\56\3\0\1\57\1\60\13\24\1\61\1\47\1\62"+
    "\1\63\1\0\1\64\1\30\1\65\1\66\3\24\3\0\1\67\12\24\1\70\1\0\1\71\1\30\1\0\1"+
    "\72\3\24\1\56\1\73\1\74\2\24\1\70\1\75\1\76\1\77\2\30\3\24\1\100\1\24\1\52"+
    "\6\30\2\24\1\33\2\24\1\30\1\101\5\0\1\102\6\24\1\103\2\0\1\104\1\24\1\105"+
    "\1\0\1\43\1\24\1\106\1\107\1\110\2\24\1\111\1\112\1\113\1\114\1\115\1\65\1"+
    "\116\1\105\1\0\1\117\1\120\1\121\1\51\1\110\2\24\1\111\1\122\1\123\1\124\1"+
    "\125\1\126\1\127\1\130\1\0\1\131\1\30\1\121\1\40\1\37\2\24\1\111\1\132\1\113"+
    "\1\47\1\133\1\134\1\30\1\105\1\0\1\44\1\135\1\121\1\107\1\110\2\24\1\111\1"+
    "\132\1\113\1\114\1\125\1\136\1\116\1\105\1\0\1\44\1\30\1\137\1\140\1\141\1"+
    "\142\1\143\1\140\1\24\1\144\1\145\1\146\1\147\1\30\1\130\1\0\1\30\1\44\1\150"+
    "\1\33\1\111\2\24\1\111\1\24\1\151\1\152\1\146\1\153\1\52\1\105\1\0\2\30\1"+
    "\106\1\33\1\111\2\24\1\111\1\154\1\113\1\152\1\146\1\153\1\35\1\105\1\0\1"+
    "\155\1\30\1\102\1\33\1\111\4\24\1\156\1\152\1\157\1\160\1\161\1\105\1\0\1"+
    "\30\1\42\1\121\1\24\1\25\1\42\2\24\1\37\1\162\1\25\1\163\1\164\1\0\1\130\1"+
    "\0\1\165\1\30\1\43\5\24\1\166\1\167\1\170\1\171\1\0\1\172\4\30\1\142\1\173"+
    "\2\24\1\174\1\24\1\166\1\175\1\176\1\53\1\0\1\177\4\30\1\134\2\30\1\172\1"+
    "\0\1\172\1\200\1\201\1\24\1\43\3\24\1\31\1\46\1\0\1\152\1\202\1\0\1\46\3\0"+
    "\1\203\1\204\7\30\5\24\1\56\1\0\1\205\1\0\1\172\1\70\1\206\1\207\1\210\1\211"+
    "\1\24\1\212\1\213\1\0\1\53\4\24\1\40\1\22\5\24\1\173\51\24\1\141\1\25\1\141"+
    "\5\24\1\141\4\24\1\141\1\25\1\141\1\24\1\25\7\24\1\141\10\24\1\214\4\30\2"+
    "\24\2\30\12\24\2\215\1\43\114\24\1\107\2\24\1\216\2\24\1\52\11\24\1\140\1"+
    "\24\1\134\1\24\1\33\1\217\1\30\2\24\1\217\1\30\2\24\1\220\1\30\1\24\1\33\1"+
    "\221\1\30\6\24\1\222\3\0\1\223\1\224\1\0\1\172\3\30\1\225\1\0\1\172\13\24"+
    "\1\134\1\226\4\24\1\227\10\24\1\215\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130\1"+
    "\0\3\24\1\215\1\31\1\30\5\24\1\117\3\24\1\27\1\0\1\172\4\30\2\24\1\170\1\2"+
    "\6\24\1\202\1\171\3\0\1\114\1\0\1\172\1\0\1\172\1\161\1\30\1\0\1\47\1\230"+
    "\7\30\1\150\5\24\1\222\1\0\1\150\1\117\1\0\1\172\1\30\1\101\1\2\1\30\1\231"+
    "\3\24\1\104\1\210\1\0\1\72\4\24\1\70\1\0\1\2\1\30\4\24\1\222\2\0\1\30\1\0"+
    "\1\232\1\0\1\72\3\24\1\215\1\24\1\134\5\24\1\233\2\30\1\234\2\0\1\235\1\236"+
    "\1\237\30\24\7\0\1\240\42\24\2\215\4\24\2\215\1\24\1\241\3\24\1\215\6\24\1"+
    "\33\1\176\1\242\1\31\1\243\1\117\1\24\1\31\1\242\1\31\1\244\1\245\3\30\1\246"+
    "\1\30\1\161\1\134\1\30\1\247\1\250\1\152\1\0\1\44\1\161\2\30\1\24\1\31\4\24"+
    "\2\30\1\0\1\203\1\251\1\0\1\230\1\30\1\252\1\42\1\162\1\253\1\32\1\254\1\24"+
    "\1\255\1\256\1\257\2\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1"+
    "\260\1\261\1\30\4\24\1\40\1\22\7\24\1\161\1\30\1\65\2\24\1\25\1\30\10\25\4"+
    "\0\5\30\1\161\72\30\1\262\3\30\1\43\1\212\1\253\1\31\1\43\11\24\1\25\1\263"+
    "\1\43\12\24\1\173\1\256\5\24\1\43\12\24\1\25\2\30\4\24\6\30\172\24\10\30\77"+
    "\24\1\31\21\24\1\31\10\30\5\24\1\215\41\24\1\31\2\24\1\0\1\261\2\30\5\24\1"+
    "\170\1\264\1\265\3\24\1\70\12\24\1\172\3\30\1\161\1\24\1\42\14\24\1\110\6"+
    "\24\1\42\1\52\4\30\1\256\1\24\1\266\1\267\2\24\1\56\1\270\1\30\1\134\6\24"+
    "\1\117\1\30\1\72\5\24\1\222\1\0\1\53\1\30\1\0\1\172\2\0\1\72\1\271\1\0\1\72"+
    "\2\24\1\70\1\53\2\24\1\170\1\0\1\2\1\30\3\24\1\31\1\102\5\24\1\56\1\0\1\230"+
    "\1\161\1\0\1\172\1\272\1\24\1\0\1\273\5\24\1\104\1\171\1\30\1\267\1\274\1"+
    "\0\1\172\2\24\1\25\1\275\6\24\1\207\1\276\1\227\2\30\1\277\1\24\1\56\1\300"+
    "\1\30\3\301\1\30\2\25\5\24\1\173\1\24\1\27\16\24\1\56\1\302\1\0\1\172\64\24"+
    "\1\117\1\30\2\24\1\25\1\303\5\24\1\117\40\30\55\24\1\215\15\24\1\27\4\30\1"+
    "\25\1\30\1\303\1\304\1\24\1\111\1\25\1\176\1\305\15\24\1\27\3\30\1\303\54"+
    "\24\1\215\2\30\10\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\143\2\30\1\256"+
    "\3\30\1\44\1\33\20\24\1\306\1\247\1\30\1\0\1\172\1\43\2\24\1\51\1\43\2\24"+
    "\1\52\1\307\12\24\1\25\3\42\1\310\1\311\2\30\1\312\1\24\1\154\2\24\1\25\2"+
    "\24\1\313\1\24\1\215\1\24\1\215\4\30\17\24\1\52\10\30\6\24\1\31\20\30\1\314"+
    "\20\30\3\24\1\31\6\24\1\134\1\30\1\230\3\30\4\24\1\30\1\256\3\24\1\52\4\24"+
    "\1\70\1\315\3\24\1\215\4\24\1\117\1\24\1\253\5\30\23\24\1\215\1\0\1\172\4"+
    "\24\1\117\4\24\1\117\5\24\1\30\6\24\1\117\23\30\46\24\1\25\1\30\2\24\1\215"+
    "\1\30\1\24\23\30\1\215\1\111\4\24\1\40\1\316\2\24\1\215\1\30\2\24\1\25\1\30"+
    "\3\24\1\25\10\30\2\24\1\317\1\30\2\24\1\215\1\30\3\24\1\27\10\30\7\24\1\307"+
    "\10\30\1\320\1\264\1\154\1\43\2\24\1\215\1\124\4\30\3\24\1\31\3\24\1\31\4"+
    "\30\1\24\1\43\2\24\1\321\3\30\6\24\1\215\1\30\2\24\1\215\1\30\2\24\1\52\1"+
    "\30\2\24\1\27\15\30\11\24\1\134\6\30\6\24\1\52\1\30\6\24\1\52\1\30\4\24\1"+
    "\222\1\30\1\0\1\172\50\30\5\24\1\322\1\27\11\30\3\24\1\31\1\161\1\30\2\24"+
    "\1\70\1\0\1\230\13\30\2\24\1\31\3\30\2\24\1\25\1\30\1\231\6\24\1\0\1\171\3"+
    "\30\1\130\1\0\1\30\1\65\1\231\5\24\1\0\1\323\1\30\1\314\3\24\1\134\1\0\1\172"+
    "\1\231\3\24\1\170\1\0\1\152\1\0\1\324\1\30\4\24\1\325\1\30\1\231\5\24\1\56"+
    "\1\0\1\326\1\327\1\0\1\330\4\30\2\24\1\37\2\24\1\222\1\0\1\204\10\30\1\25"+
    "\1\254\1\24\1\40\1\24\1\134\5\24\1\170\1\0\1\315\1\0\1\172\1\331\1\107\1\110"+
    "\2\24\1\111\1\132\1\332\1\114\1\125\1\147\1\256\1\105\2\203\21\30\6\24\1\202"+
    "\1\0\1\205\1\52\1\0\1\333\1\27\3\30\6\24\2\0\1\334\1\30\1\0\1\172\24\30\5"+
    "\24\1\170\1\53\1\0\1\230\2\30\1\274\4\30\6\24\2\0\1\335\1\30\1\0\1\172\4\30"+
    "\5\24\1\56\1\0\1\134\1\0\1\172\6\30\3\24\1\214\1\0\1\2\1\0\1\172\30\30\5\24"+
    "\1\222\1\0\1\315\14\30\10\24\1\0\1\172\1\30\1\161\1\25\1\336\1\337\3\24\1"+
    "\47\1\340\1\341\1\30\1\0\1\172\10\30\1\24\1\42\4\24\1\104\1\342\1\343\3\30"+
    "\1\104\1\231\4\24\1\56\1\344\1\65\1\30\1\104\1\102\5\24\1\212\1\0\1\345\4"+
    "\30\7\24\1\134\40\30\1\24\1\111\3\24\1\170\1\171\1\0\1\134\1\30\1\0\1\172"+
    "\2\30\1\42\3\24\1\342\2\0\1\46\1\171\11\30\1\25\1\37\4\24\1\346\1\347\1\213"+
    "\1\30\1\0\1\172\1\40\1\111\3\24\1\350\1\240\1\134\1\0\1\172\46\30\2\24\1\351"+
    "\27\30\1\134\4\30\1\256\1\134\3\30\63\24\1\27\14\30\15\24\1\25\2\30\30\24"+
    "\1\117\27\30\5\24\1\25\1\0\1\230\70\30\10\24\1\25\67\30\7\24\1\134\3\24\1"+
    "\25\1\0\1\172\14\30\3\24\1\215\1\203\1\30\6\24\1\171\1\30\1\117\1\30\1\0\1"+
    "\172\1\303\2\24\1\256\2\24\26\30\10\24\20\30\11\24\1\352\1\104\6\0\1\65\1"+
    "\231\1\24\10\30\1\353\1\30\1\172\1\30\77\24\1\30\32\24\1\215\5\30\1\24\1\134"+
    "\36\30\43\24\1\25\6\30\1\52\1\30\1\354\1\30\61\24\1\117\40\30\15\24\1\52\1"+
    "\24\1\31\1\24\1\134\1\24\1\355\1\2\127\30\1\136\1\356\2\0\1\357\1\2\3\30\1"+
    "\360\22\30\1\361\67\30\12\24\1\33\10\24\1\33\1\362\1\363\1\24\1\364\1\154"+
    "\7\24\1\40\1\233\2\33\3\24\1\365\1\176\1\42\1\111\51\24\1\215\3\24\1\111\2"+
    "\24\1\173\3\24\1\173\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3\24\1\111\3"+
    "\24\1\111\2\24\1\173\1\366\14\0\1\171\1\101\5\0\1\203\1\314\1\30\1\270\2\30"+
    "\1\101\1\46\1\0\52\30\1\171\2\0\1\367\1\370\1\315\32\30\5\24\1\31\1\205\1"+
    "\215\1\0\1\371\56\30\5\24\1\222\1\0\1\372\40\30\30\24\1\31\1\30\1\171\5\30"+
    "\10\24\1\222\1\373\1\0\1\172\52\30\1\134\51\30\1\154\3\24\1\374\1\43\1\173"+
    "\1\375\1\252\1\376\1\374\1\241\1\374\2\173\1\127\1\24\1\37\1\24\1\117\1\377"+
    "\1\37\1\24\1\117\146\30\1\0\1\172\33\24\1\215\4\30\106\24\1\31\1\30\33\24"+
    "\1\215\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\215\74\30\51\24\1\52\26\30"+
    "\1\126\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 2048 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\16\1\3\1\2\1\42\1\43\1\1\6\16\4\15\1\3\1\15\1\13\1\73\1\4\2\15\1\17\1"+
    "\67\1\70\1\15\1\24\1\61\1\7\1\6\1\15\1\26\11\21\1\63\1\15\1\62\1\11\1\64\1"+
    "\65\1\44\4\22\1\23\1\22\5\4\1\31\3\4\1\25\4\4\1\30\2\4\1\27\2\4\1\10\1\14"+
    "\1\12\1\15\1\4\1\20\1\37\1\60\1\53\1\46\1\35\1\36\1\52\1\54\1\45\2\4\1\40"+
    "\1\50\1\56\1\55\1\47\1\4\1\33\1\41\1\32\1\34\1\51\1\4\1\27\1\57\1\4\1\71\1"+
    "\66\1\72\1\15\6\16\1\5\2\16\1\0\1\15\4\4\4\15\1\4\2\15\1\16\7\15\1\4\4\15"+
    "\1\4\5\15\17\4\1\15\2\4\4\15\4\4\16\15\5\4\7\15\1\4\1\15\1\4\1\15\5\4\1\15"+
    "\2\4\2\15\4\4\1\15\1\4\6\15\1\4\1\15\3\4\1\15\1\4\1\15\4\4\1\15\13\4\1\15"+
    "\3\4\1\15\5\16\2\15\6\4\1\15\7\4\1\15\1\4\6\15\1\4\6\15\1\4\1\15\15\16\1\15"+
    "\1\16\1\15\2\16\1\15\2\16\1\15\1\16\3\4\4\15\4\4\5\15\6\16\5\15\1\4\4\15\3"+
    "\16\1\15\1\16\3\15\3\4\7\16\4\15\2\4\1\16\13\4\1\15\1\4\7\16\2\4\2\16\1\15"+
    "\4\16\2\4\2\16\3\4\2\15\1\4\7\15\1\16\1\4\1\16\6\4\3\16\2\15\11\4\3\16\1\4"+
    "\6\15\2\16\6\4\4\16\2\4\4\15\1\4\2\15\1\16\2\4\2\16\1\4\11\16\1\4\3\16\1\4"+
    "\5\16\2\15\1\4\3\16\7\15\11\16\6\4\3\16\1\4\2\16\1\4\7\16\2\4\2\16\2\15\2"+
    "\16\1\4\3\16\1\15\10\4\2\15\2\4\2\15\6\4\1\15\7\4\1\15\1\4\3\15\4\4\2\15\1"+
    "\16\1\4\7\16\2\15\2\16\2\15\3\16\1\4\5\15\2\4\1\15\5\4\7\15\2\4\1\15\1\16"+
    "\2\15\3\16\1\15\4\4\1\15\2\4\1\15\2\4\1\15\2\4\2\15\1\16\1\15\5\16\4\15\2"+
    "\16\2\15\3\16\3\15\1\16\7\15\4\4\1\15\1\4\7\15\4\16\3\4\1\16\2\15\1\4\1\15"+
    "\2\4\1\15\3\4\2\16\1\15\3\16\2\15\1\4\10\15\1\4\6\16\5\15\3\16\2\15\1\16\1"+
    "\4\1\15\6\4\3\15\3\4\1\15\4\4\3\15\2\4\1\15\1\4\1\15\2\4\3\15\2\4\3\15\2\4"+
    "\4\15\5\16\3\15\3\16\1\15\4\16\2\15\1\4\6\15\6\16\5\4\3\15\1\4\7\16\1\15\2"+
    "\16\5\15\2\16\1\15\4\4\1\15\3\4\1\15\2\4\5\15\3\4\2\16\1\4\3\16\1\15\4\16"+
    "\1\4\5\15\3\4\1\16\7\15\5\4\1\15\1\4\4\15\1\16\4\15\6\16\1\15\1\16\3\15\2"+
    "\16\4\15\1\4\1\16\2\4\7\16\4\15\10\4\10\16\1\15\2\16\6\15\3\4\1\15\10\4\1"+
    "\15\1\4\1\15\1\4\5\16\1\4\2\15\5\4\1\15\1\4\1\15\2\16\2\15\4\4\5\15\1\16\1"+
    "\15\1\16\1\15\1\16\4\15\2\16\5\4\10\16\11\15\1\16\1\15\7\16\1\4\2\16\4\4\3"+
    "\16\1\4\3\16\2\4\7\16\3\4\4\16\5\4\14\16\1\4\1\16\3\4\2\15\3\16\6\4\2\15\1"+
    "\0\11\4\3\16\3\15\2\4\2\16\4\15\1\4\1\15\2\16\4\15\4\4\10\16\3\15\1\4\3\15"+
    "\2\4\1\16\5\15\4\16\1\15\5\4\2\16\2\4\1\16\1\4\5\15\1\16\7\15\3\16\5\4\2\16"+
    "\3\15\6\4\2\15\3\4\3\16\1\15\5\16\4\4\1\16\6\4\1\16\2\4\3\16\1\4\5\15\2\16"+
    "\1\15\5\16\1\15\1\4\1\15\1\4\1\15\1\4\1\15\1\4\2\15\3\4\1\15\6\4\2\15\2\4"+
    "\13\0\5\16\2\42\5\16\1\0\4\15\1\4\12\15\1\0\1\15\1\16\3\15\3\16\2\15\1\4\4"+
    "\15\1\4\1\15\5\4\2\15\1\4\1\15\4\4\1\15\3\4\2\15\4\4\5\15\5\4\4\15\1\4\4\15"+
    "\4\4\3\16\2\4\4\15\1\0\4\15\3\4\1\15\2\16\2\15\3\4\4\15\12\16\1\15\3\4\1\16"+
    "\3\4\1\16\4\4\1\16\4\4\4\15\1\16\6\15\1\4\1\15\2\4\1\16\5\4\1\16\2\4\2\16"+
    "\5\4\1\15\4\4\2\16\4\15\1\4\3\16\2\4\1\16\5\4\2\16\3\15\3\4\4\15\3\4\2\16"+
    "\2\15\6\4\1\15\3\16\1\15\2\16\5\15\5\4\5\15\1\4\1\16\3\4\1\15\2\4\1\15\7\4"+
    "\2\15\1\16\6\15\2\4\2\15\3\4\3\15\2\4\3\15\2\4\2\15\3\16\4\15\3\4\1\15\2\4"+
    "\1\15\1\4\5\15\1\16\2\15\3\16\5\15\1\4\3\15\1\4\2\15\4\4\1\15\2\4\2\15\1\4"+
    "\3\16\1\15\2\16\1\15\5\4\2\16\1\15\2\4\1\15\2\16\3\15\3\16\2\15\1\16\6\15"+
    "\1\4\2\16\4\4\1\16\2\15\1\4\1\15\1\16\4\4\4\15\4\16\1\15\4\16\1\4\1\15\1\4"+
    "\3\15\4\16\1\15\5\4\1\15\2\16\1\4\4\16\4\15\1\16\1\4\4\16\2\4\1\15\1\4\1\16"+
    "\3\15\1\4\4\15\1\4\2\15\10\4\1\15\2\4\1\15\1\16\2\15\4\16\1\4\1\16\1\4\2\16"+
    "\6\15\7\16\1\4\1\15\1\4\1\16\3\15\2\16\1\4\4\16\1\15\2\16\3\15\1\4\2\15\1"+
    "\4\6\16\3\15\1\16\1\15\2\16\1\15\1\16\2\4\5\16\1\15\3\4\4\16\1\15\3\4\4\15"+
    "\1\16\2\4\1\15\1\4\1\16\7\15\6\4\3\15\2\16\1\15\2\16\3\15\6\16\2\15\3\16\2"+
    "\15\4\16\4\15\3\16\5\15\1\4\2\15\2\4\2\15\4\4\1\15\4\4\1\15\1\4\1\15\5\4\1"+
    "\15\4\4\1\15\4\4\2\15\3\16\2\15\7\16\1\15\2\16\1\15\4\16\4\15\1\4\1\15\2\16"+
    "\5\15\1\4\3\16\1\4\5\15\2\4\1\15\1\4\2\15\1\4\1\15\1\4\1\15\1\4\5\15\1\4\1"+
    "\15\1\4\1\15\3\4\1\15\3\4\1\15\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\22\0\1\2\1\3\1\2\1\4\2\5"+
    "\1\6\2\4\1\7\1\3\1\10\1\3\1\11\1\12"+
    "\1\13\16\14\1\1\1\6\1\1\1\15\1\3\2\16"+
    "\1\17\1\20\1\3\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\3\20\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\51\1\16"+
    "\2\2\1\53\1\54\1\55\1\56\1\57\2\3\1\60"+
    "\1\3\1\61\1\0\1\62\1\0\1\63\21\14\1\63"+
    "\2\0\3\27\3\0\5\20\2\51\1\0\1\64\5\0"+
    "\6\14\1\65\12\14\1\66\1\67\1\70\1\27\1\0"+
    "\2\27\2\20\1\71\2\20\3\51\1\0\1\72\17\14"+
    "\1\0\1\27\1\0\1\73\2\20\3\51\1\0\1\14"+
    "\1\74\1\75\2\14\1\76\3\14\1\77\3\14\1\100"+
    "\1\14\1\27\1\101\1\20\3\51\1\0\1\102\4\14"+
    "\1\103\1\104\1\105\2\14\1\27\1\106\2\51\1\107"+
    "\1\110\2\14\1\111\1\14\1\112\1\14\1\113\1\51"+
    "\1\114\1\115\1\14\1\116\1\51\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05a0\0\u05dc\0\u05a0\0\u0618\0\u05a0\0\u0654\0\u0690"+
    "\0\u06cc\0\u05a0\0\u0618\0\u0708\0\u06cc\0\u05a0\0\u05a0\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u05a0\0\u06cc\0\u05a0\0\u0bf4\0\u0c30"+
    "\0\u05a0\0\u05a0\0\u06cc\0\u05a0\0\u05a0\0\u05a0\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u05a0\0\u05a0\0\u05a0\0\u05a0\0\u05a0"+
    "\0\u05a0\0\u05a0\0\u05a0\0\u05a0\0\u05a0\0\u0d98\0\u05a0\0\u05a0"+
    "\0\u05a0\0\u05a0\0\u05a0\0\u05a0\0\u0dd4\0\u05a0\0\u0e10\0\u0618"+
    "\0\u0618\0\u06cc\0\u0e4c\0\u05a0\0\u05a0\0\u05a0\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u05a0\0\u0fb4\0\u0690\0\u06cc\0\u05a0"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u0ac8\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u0ec4\0\u05a0\0\u1770\0\u0f00\0\u17ac\0\u0f78\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u0780\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u0780\0\u05a0\0\u05a0\0\u1be4\0\u1464\0\u05a0\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u0bf4\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u0780\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u0bf4\0\u2274\0\u22b0\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u0780\0\u0780\0\u2418\0\u2454"+
    "\0\u0780\0\u2490\0\u24cc\0\u2508\0\u0780\0\u2544\0\u2580\0\u25bc"+
    "\0\u0780\0\u25f8\0\u2634\0\u0bf4\0\u2670\0\u26ac\0\u26e8\0\u2724"+
    "\0\u2760\0\u0780\0\u279c\0\u27d8\0\u2814\0\u2850\0\u0780\0\u0780"+
    "\0\u0780\0\u288c\0\u28c8\0\u2904\0\u0bf4\0\u2940\0\u297c\0\u0dd4"+
    "\0\u2760\0\u29b8\0\u29f4\0\u0780\0\u2a30\0\u0780\0\u2a6c\0\u0dd4"+
    "\0\u2aa8\0\u0780\0\u0780\0\u2ae4\0\u0780\0\u2b20\0\u0780\0\u0dd4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\2\32\2\31\1\32\1\31\1\33\32\31\2\32"+
    "\30\31\1\34\1\35\1\36\1\37\1\34\1\32\1\34"+
    "\1\40\2\34\1\41\27\34\1\32\1\37\1\42\27\34"+
    "\1\32\1\43\1\32\1\37\1\44\5\32\1\45\7\32"+
    "\2\44\1\32\1\44\1\32\13\44\1\32\1\37\1\46"+
    "\14\44\12\32\1\47\1\32\1\35\1\36\1\37\1\50"+
    "\5\32\1\45\7\32\2\50\1\32\1\50\1\32\13\50"+
    "\1\32\1\37\1\32\14\50\14\32\1\43\1\32\1\37"+
    "\1\51\5\32\1\45\7\32\2\51\1\32\1\51\1\32"+
    "\3\51\1\52\1\53\2\51\1\54\1\55\1\56\1\57"+
    "\1\32\1\37\1\32\2\51\1\60\1\61\1\62\1\63"+
    "\1\64\1\51\1\65\1\66\2\51\13\32\1\67\1\35"+
    "\1\36\1\70\6\67\1\71\30\67\1\70\30\67\1\32"+
    "\1\35\1\36\1\37\1\72\1\32\1\73\3\32\1\45"+
    "\7\32\2\72\1\32\1\72\1\32\13\72\1\32\1\37"+
    "\1\32\14\72\13\32\3\74\1\37\6\74\1\75\30\74"+
    "\1\37\21\74\1\76\6\74\1\32\1\35\1\36\1\37"+
    "\1\77\1\32\1\100\1\101\1\102\1\32\1\103\1\104"+
    "\3\32\1\105\1\106\1\107\2\77\1\32\1\77\1\110"+
    "\3\77\1\111\3\77\1\112\3\77\1\32\1\37\1\46"+
    "\4\77\1\113\7\77\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\2\32\1\35\1\36"+
    "\1\37\1\126\5\32\1\45\7\32\2\126\1\32\1\126"+
    "\1\32\13\126\1\32\1\37\1\32\14\126\13\32\62\127"+
    "\1\130\11\127\3\32\1\37\1\44\5\32\1\45\7\32"+
    "\2\44\1\32\1\44\1\32\13\44\1\32\1\37\1\32"+
    "\14\44\1\131\1\32\1\132\1\133\10\32\1\35\1\36"+
    "\1\37\6\32\1\45\30\32\1\37\17\32\1\134\11\32"+
    "\1\35\1\36\1\37\1\135\3\32\1\136\1\32\1\45"+
    "\7\32\2\135\1\32\1\135\1\32\13\135\1\32\1\37"+
    "\1\32\2\135\1\137\11\135\14\32\1\35\1\36\1\37"+
    "\1\135\3\32\1\136\1\32\1\45\7\32\2\135\1\32"+
    "\1\135\1\32\13\135\1\32\1\37\1\32\14\135\13\32"+
    "\1\74\1\140\1\74\1\37\6\74\1\75\30\74\1\37"+
    "\30\74\1\31\1\141\1\31\1\37\1\44\5\31\1\142"+
    "\7\31\2\44\1\31\1\44\1\31\13\44\1\31\1\37"+
    "\1\31\14\44\1\131\1\31\1\134\10\31\1\32\1\35"+
    "\1\36\1\37\1\143\5\32\1\45\7\32\2\143\1\32"+
    "\1\143\1\32\13\143\1\32\1\37\1\32\14\143\13\32"+
    "\62\74\1\144\11\74\3\32\1\37\1\44\5\32\1\45"+
    "\7\32\2\44\1\32\1\44\1\32\13\44\1\32\1\37"+
    "\1\32\14\44\1\131\1\32\1\145\1\146\7\32\1\31"+
    "\1\141\1\31\1\37\1\147\5\31\1\142\7\31\2\147"+
    "\1\31\1\147\1\31\13\147\1\31\1\37\1\31\14\147"+
    "\1\131\12\31\13\32\1\150\77\32\1\151\54\32\14\152"+
    "\1\153\3\152\1\154\53\152\103\0\1\155\66\0\1\36"+
    "\74\0\1\37\37\0\1\37\37\0\1\156\75\0\1\157"+
    "\1\160\65\0\2\44\10\0\1\44\2\0\3\44\1\0"+
    "\15\44\3\0\14\44\17\0\3\50\7\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\14\50\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\15\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\15\51\3\0"+
    "\12\51\1\161\1\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\10\51\1\162\4\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\15\51\3\0"+
    "\1\163\13\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\13\51\1\164\1\51\3\0\14\51\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\12\51\1\165\2\51"+
    "\3\0\14\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\7\51\1\166\1\167\4\51\3\0\7\51\1\170"+
    "\4\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\6\51\1\171\1\172\2\51\1\173\2\51\3\0\14\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\15\51"+
    "\3\0\10\51\1\174\3\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\12\51\1\175\2\51\3\0\14\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\10\51"+
    "\1\176\4\51\3\0\14\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\13\51\1\177\1\51\3\0\14\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\15\51"+
    "\3\0\4\51\1\200\7\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\15\51\3\0\10\51\1\201\3\51"+
    "\13\0\1\67\2\0\72\67\2\0\1\70\37\67\1\70"+
    "\31\67\2\0\6\67\1\71\1\202\61\67\4\0\2\72"+
    "\10\0\1\72\2\0\3\72\1\0\15\72\3\0\14\72"+
    "\21\0\1\203\71\0\2\77\10\0\1\77\2\0\3\77"+
    "\1\0\15\77\3\0\14\77\21\0\1\204\12\0\1\205"+
    "\4\0\1\205\53\0\1\206\12\0\1\107\1\0\1\207"+
    "\2\0\1\107\1\0\1\210\1\211\3\0\1\207\44\0"+
    "\1\206\12\0\1\107\1\0\1\207\2\0\1\107\1\212"+
    "\1\210\1\211\3\0\1\207\42\0\2\77\10\0\1\77"+
    "\2\0\3\77\1\0\6\77\1\213\3\77\1\214\2\77"+
    "\3\0\14\77\17\0\2\77\10\0\1\77\2\0\3\77"+
    "\1\0\7\77\1\215\2\77\1\216\2\77\3\0\14\77"+
    "\17\0\2\77\10\0\1\77\2\0\3\77\1\0\12\77"+
    "\1\217\2\77\3\0\14\77\17\0\2\126\10\0\1\126"+
    "\2\0\3\126\1\0\15\126\3\0\14\126\17\0\2\135"+
    "\10\0\1\135\2\0\3\135\1\0\15\135\3\0\14\135"+
    "\17\0\2\135\10\0\1\135\2\0\3\135\1\0\6\135"+
    "\1\220\1\221\5\135\3\0\14\135\17\0\2\143\10\0"+
    "\1\143\2\0\3\143\1\0\15\143\3\0\14\143\17\0"+
    "\3\147\7\0\1\147\2\0\3\147\1\0\15\147\3\0"+
    "\14\147\13\0\13\222\1\223\1\224\57\222\14\225\1\226"+
    "\2\225\1\223\54\225\14\152\1\227\3\152\1\0\53\152"+
    "\1\0\2\152\1\0\1\152\1\0\34\152\2\0\30\152"+
    "\10\0\1\230\67\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\15\51\3\0\2\51\1\231\11\51\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\5\51\1\232\7\51"+
    "\3\0\14\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\10\51\1\233\4\51\3\0\14\51\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\15\51\3\0\1\234"+
    "\13\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\15\51\3\0\11\51\1\235\2\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\15\51\3\0\2\51\1\236"+
    "\11\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\10\51\1\237\4\51\3\0\14\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\12\51\1\240\2\51\3\0"+
    "\14\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\15\51\3\0\1\241\7\51\1\242\3\51\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\15\51\3\0\13\51"+
    "\1\243\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\6\51\1\244\6\51\3\0\14\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\15\51\3\0\1\51\1\245"+
    "\12\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\6\51\1\246\6\51\3\0\14\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\15\51\3\0\11\51\1\247"+
    "\2\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\12\51\1\250\2\51\3\0\14\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\10\51\1\251\4\51\3\0"+
    "\14\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\5\51\1\252\7\51\3\0\14\51\21\0\1\253\73\0"+
    "\1\254\106\0\1\205\4\0\1\205\66\0\1\255\4\0"+
    "\1\255\54\0\1\256\11\0\1\205\2\0\1\256\1\0"+
    "\1\205\76\0\1\211\73\0\1\257\63\0\3\260\2\0"+
    "\1\260\6\0\3\260\6\0\1\260\4\0\1\260\4\0"+
    "\1\260\17\0\2\77\10\0\1\77\2\0\3\77\1\0"+
    "\7\77\1\261\5\77\3\0\14\77\17\0\2\77\10\0"+
    "\1\77\2\0\3\77\1\0\15\77\3\0\13\77\1\262"+
    "\17\0\2\77\10\0\1\77\2\0\3\77\1\0\15\77"+
    "\3\0\11\77\1\263\2\77\17\0\2\77\10\0\1\77"+
    "\2\0\3\77\1\0\13\77\1\264\1\77\3\0\14\77"+
    "\17\0\2\77\10\0\1\77\2\0\3\77\1\0\6\77"+
    "\1\265\6\77\3\0\14\77\17\0\2\135\10\0\1\135"+
    "\2\0\3\135\1\0\15\135\3\0\1\266\7\135\1\267"+
    "\3\135\17\0\2\135\10\0\1\135\2\0\3\135\1\0"+
    "\15\135\3\0\13\135\1\270\14\0\2\222\1\0\1\222"+
    "\1\0\34\222\2\0\30\222\1\0\2\225\1\0\1\225"+
    "\1\0\34\225\2\0\30\225\10\0\1\271\1\230\66\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\10\51\1\272"+
    "\4\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\7\51\1\273\5\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\13\51\1\274"+
    "\1\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\12\51\1\275\2\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\15\51\3\0"+
    "\5\51\1\276\6\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\15\51\3\0\2\51\1\277\11\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\15\51\3\0"+
    "\2\51\1\300\11\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\15\51\3\0\4\51\1\301\7\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\5\51\1\302"+
    "\7\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\13\51\1\303\1\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\12\51\1\304"+
    "\2\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\7\51\1\305\5\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\12\51\1\306"+
    "\2\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\10\51\1\307\4\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\14\51\1\310"+
    "\3\0\14\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\6\51\1\311\6\51\3\0\14\51\34\0\1\255"+
    "\1\0\1\207\2\0\1\255\6\0\1\207\44\0\1\312"+
    "\12\0\2\260\1\313\1\0\1\314\1\260\1\0\1\210"+
    "\1\211\3\0\1\313\2\260\6\0\1\260\1\314\3\0"+
    "\1\260\4\0\1\260\17\0\2\77\10\0\1\77\2\0"+
    "\3\77\1\0\10\77\1\315\4\77\3\0\14\77\17\0"+
    "\2\77\10\0\1\77\2\0\3\77\1\0\13\77\1\316"+
    "\1\77\3\0\14\77\17\0\2\77\10\0\1\77\2\0"+
    "\3\77\1\0\14\77\1\261\3\0\14\77\17\0\2\77"+
    "\10\0\1\77\2\0\3\77\1\0\12\77\1\317\2\77"+
    "\3\0\14\77\17\0\2\135\10\0\1\135\2\0\3\135"+
    "\1\0\15\135\3\0\4\135\1\320\7\135\17\0\2\135"+
    "\10\0\1\135\2\0\3\135\1\0\5\135\1\321\7\135"+
    "\3\0\14\135\17\0\2\135\10\0\1\135\2\0\3\135"+
    "\1\0\13\135\1\322\1\135\3\0\14\135\22\0\1\323"+
    "\70\0\2\51\10\0\1\51\2\0\3\51\1\0\6\51"+
    "\1\324\6\51\3\0\14\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\15\51\3\0\1\51\1\325\12\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\14\51"+
    "\1\326\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\7\51\1\327\5\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\6\51\1\330"+
    "\6\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\10\51\1\331\4\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\12\51\1\332"+
    "\2\51\3\0\14\51\17\0\2\51\10\0\1\51\2\0"+
    "\3\51\1\0\10\51\1\333\4\51\3\0\14\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\15\51\3\0"+
    "\1\334\13\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\15\51\3\0\3\51\1\335\10\51\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\13\51\1\336\1\51"+
    "\3\0\14\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\6\51\1\337\6\51\3\0\14\51\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\6\51\1\340\6\51"+
    "\3\0\14\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\14\51\1\341\3\0\14\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\13\51\1\342\1\51\3\0"+
    "\14\51\34\0\3\343\2\0\1\343\6\0\3\343\6\0"+
    "\1\343\4\0\1\343\4\0\1\343\21\0\1\312\1\256"+
    "\11\0\2\260\1\313\1\256\1\314\1\260\1\0\1\210"+
    "\1\211\3\0\1\313\2\260\6\0\1\260\1\314\3\0"+
    "\1\260\4\0\1\260\22\0\1\256\14\0\1\256\53\0"+
    "\2\77\10\0\1\77\2\0\3\77\1\0\10\77\1\344"+
    "\4\77\3\0\14\77\17\0\2\77\10\0\1\77\2\0"+
    "\3\77\1\0\6\77\1\345\6\77\3\0\14\77\17\0"+
    "\2\135\10\0\1\135\2\0\3\135\1\0\12\135\1\346"+
    "\2\135\3\0\14\135\17\0\2\135\10\0\1\135\2\0"+
    "\3\135\1\0\10\135\1\347\4\135\3\0\14\135\17\0"+
    "\2\135\10\0\1\135\2\0\3\135\1\0\15\135\3\0"+
    "\1\350\13\135\22\0\1\351\70\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\15\51\3\0\11\51\1\352\2\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\12\51"+
    "\1\353\2\51\3\0\14\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\10\51\1\354\4\51\3\0\14\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\5\51"+
    "\1\355\7\51\3\0\14\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\15\51\3\0\6\51\1\356\5\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\15\51"+
    "\3\0\6\51\1\357\5\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\10\51\1\360\4\51\3\0\14\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\15\51"+
    "\3\0\5\51\1\361\6\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\15\51\3\0\1\362\13\51\17\0"+
    "\2\51\10\0\1\51\2\0\3\51\1\0\15\51\3\0"+
    "\10\51\1\363\3\51\34\0\2\343\1\364\1\0\1\314"+
    "\1\343\6\0\1\364\2\343\6\0\1\343\1\314\3\0"+
    "\1\343\4\0\1\343\17\0\2\77\10\0\1\77\2\0"+
    "\3\77\1\0\15\77\3\0\5\77\1\365\6\77\17\0"+
    "\2\135\10\0\1\135\2\0\3\135\1\0\5\135\1\366"+
    "\7\135\3\0\14\135\17\0\2\135\10\0\1\135\2\0"+
    "\3\135\1\0\15\135\3\0\6\135\1\367\5\135\17\0"+
    "\2\135\10\0\1\135\2\0\3\135\1\0\15\135\3\0"+
    "\6\135\1\370\5\135\22\0\1\371\70\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\15\51\3\0\5\51\1\372"+
    "\6\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\14\51\1\373\3\0\14\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\10\51\1\374\4\51\3\0\14\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\5\51"+
    "\1\375\7\51\3\0\14\51\17\0\2\51\10\0\1\51"+
    "\2\0\3\51\1\0\15\51\3\0\6\51\1\376\5\51"+
    "\17\0\2\51\10\0\1\51\2\0\3\51\1\0\12\51"+
    "\1\377\2\51\3\0\14\51\22\0\1\256\11\0\2\343"+
    "\1\364\1\256\1\314\1\343\6\0\1\364\2\343\6\0"+
    "\1\343\1\314\3\0\1\343\4\0\1\343\17\0\2\135"+
    "\10\0\1\135\2\0\3\135\1\0\10\135\1\u0100\4\135"+
    "\3\0\14\135\17\0\2\135\10\0\1\135\2\0\3\135"+
    "\1\0\5\135\1\u0101\7\135\3\0\14\135\17\0\2\51"+
    "\10\0\1\51\2\0\3\51\1\0\10\51\1\u0102\4\51"+
    "\3\0\14\51\17\0\2\51\10\0\1\51\2\0\3\51"+
    "\1\0\14\51\1\u0103\3\0\14\51\17\0\2\51\10\0"+
    "\1\51\2\0\3\51\1\0\10\51\1\u0104\4\51\3\0"+
    "\14\51\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\15\51\3\0\1\51\1\u0105\12\51\17\0\2\135\10\0"+
    "\1\135\2\0\3\135\1\0\10\135\1\u0106\4\135\3\0"+
    "\14\135\17\0\2\51\10\0\1\51\2\0\3\51\1\0"+
    "\15\51\3\0\1\51\1\u0107\12\51\17\0\2\135\10\0"+
    "\1\135\2\0\3\135\1\0\15\135\3\0\1\135\1\u0108"+
    "\12\135\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\22\0\2\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\24\1\1\11\1\1\1\11"+
    "\2\1\2\11\1\1\3\11\5\1\12\11\1\1\6\11"+
    "\1\1\1\11\5\1\3\11\5\1\1\11\1\0\1\1"+
    "\1\0\1\11\22\1\2\0\3\1\3\0\7\1\1\0"+
    "\1\11\5\0\22\1\2\11\1\1\1\0\1\11\11\1"+
    "\1\0\20\1\1\0\1\1\1\0\6\1\1\0\25\1"+
    "\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private int _nextState;

    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType(int nextState) {
        yybegin(xTYPE);
        _typeLevel = 0;
        _typeReq = true;
        _nextState = nextState;
    }

    private void beginType() {
        beginType(xBODY);
    }

    private int nBrackets = -1;

    private int checkAhead(char c) {
        int length = this.zzBuffer.length();

        for (int pos = this.zzMarkedPos; pos < length; pos++) {
            char charAhead = zzBuffer.charAt(pos);

            if (charAhead == c) {
                return pos;
            }

            if (charAhead != ' ' && charAhead != '\t' && charAhead != '\f') {
                return -1;
            }
        }

        return -1;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(xBODY); return STRING;
            } 
            // fall through
          case 81: break;
          case 2: 
            { yybegin(xBODY); yypushback(yylength());
            } 
            // fall through
          case 82: break;
          case 3: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 83: break;
          case 4: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 84: break;
          case 5: 
            { yybegin(xBODY); return EOL;
            } 
            // fall through
          case 85: break;
          case 6: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 86: break;
          case 7: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 87: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 88: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 89: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 90: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return PROPERTY;
            } 
            // fall through
          case 91: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 92: break;
          case 13: 
            { yybegin(xPARAM_SUFFIX); return ID;
            } 
            // fall through
          case 93: break;
          case 14: 
            { beginType(); yypushback(yylength());
            } 
            // fall through
          case 94: break;
          case 15: 
            { beginType(); return QUESTION_MARK;
            } 
            // fall through
          case 95: break;
          case 16: 
            { if (_typeReq || _typeLevel > 0) {
            _typeReq = false;
            return ID;
        } else {
            yybegin(_nextState); yypushback(yylength());
        }
            } 
            // fall through
          case 96: break;
          case 17: 
            { return MINUS;
            } 
            // fall through
          case 97: break;
          case 18: 
            { int closePos = checkAhead(']');
        if (closePos != -1) {
            _typeReq = false;
            zzMarkedPos = closePos + 1;
            return ARR;
        } else {
            _typeLevel++;
            return LBRACK;
        }
            } 
            // fall through
          case 98: break;
          case 19: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return RBRACK;
        }
            } 
            // fall through
          case 99: break;
          case 20: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 100: break;
          case 21: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 101: break;
          case 22: 
            { yybegin(xBACKTICK_QUOTED_STRING); return BACKTICK;
            } 
            // fall through
          case 102: break;
          case 23: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 103: break;
          case 24: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 104: break;
          case 25: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 105: break;
          case 26: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 106: break;
          case 27: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return GT;
        }
            } 
            // fall through
          case 107: break;
          case 28: 
            { return QUESTION_MARK;
            } 
            // fall through
          case 108: break;
          case 29: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 109: break;
          case 30: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 110: break;
          case 31: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return RPAREN;
        }
            } 
            // fall through
          case 111: break;
          case 32: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 112: break;
          case 33: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return RCURLY;
        }
            } 
            // fall through
          case 113: break;
          case 34: 
            { yybegin(xCLASS_PARAMS); return ID;
            } 
            // fall through
          case 114: break;
          case 35: 
            { yybegin(xCLASS_EXTEND); yypushback(yylength());
            } 
            // fall through
          case 115: break;
          case 36: 
            { yybegin(xCLASS_PARAM_LIST); return LT;
            } 
            // fall through
          case 116: break;
          case 37: 
            { return COMMA;
            } 
            // fall through
          case 117: break;
          case 38: 
            { beginType(xCLASS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 118: break;
          case 39: 
            { yybegin(xCLASS_EXTEND); return GT;
            } 
            // fall through
          case 119: break;
          case 40: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 120: break;
          case 41: 
            { beginType(); return ID;
            } 
            // fall through
          case 121: break;
          case 42: 
            { beginType(xFIELD_VALUE); yypushback(yylength());
            } 
            // fall through
          case 122: break;
          case 43: 
            { yybegin(xALIAS_PARAMS); return ID;
            } 
            // fall through
          case 123: break;
          case 44: 
            { yybegin(xALIAS_PARAM_LIST); return LT;
            } 
            // fall through
          case 124: break;
          case 45: 
            { beginType(xALIAS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 125: break;
          case 46: 
            { beginType(); return GT;
            } 
            // fall through
          case 126: break;
          case 47: 
            { return PROPERTY;
            } 
            // fall through
          case 127: break;
          case 48: 
            { return SNIPPET;
            } 
            // fall through
          case 128: break;
          case 49: 
            { yybegin(xTYPE); return BACKTICK;
            } 
            // fall through
          case 129: break;
          case 50: 
            { if (nBrackets == -1) return DASHES;
            } 
            // fall through
          case 130: break;
          case 51: 
            { if (yylength() - 2 == nBrackets) {
            nBrackets = -1;
            return BLOCK_END;
        }
            } 
            // fall through
          case 131: break;
          case 52: 
            { yybegin(xTYPE); return STRING_LITERAL;
            } 
            // fall through
          case 132: break;
          case 53: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 133: break;
          case 54: 
            { beginType(); return TAG_NAME_NOT;
            } 
            // fall through
          case 134: break;
          case 55: 
            { beginType(); return ELLIPSIS;
            } 
            // fall through
          case 135: break;
          case 56: 
            { return ELLIPSIS;
            } 
            // fall through
          case 136: break;
          case 57: 
            { if (!_typeReq && checkAhead(':') != -1) {
              return ID;
        } else {
              _typeReq = false;
              return FUN;
        }
            } 
            // fall through
          case 137: break;
          case 58: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 138: break;
          case 59: 
            { return BOOLEAN_LITERAL;
            } 
            // fall through
          case 139: break;
          case 60: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 140: break;
          case 61: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 141: break;
          case 62: 
            { yybegin(xCLASS); return TAG_NAME_SHAPE;
            } 
            // fall through
          case 142: break;
          case 63: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 143: break;
          case 64: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 144: break;
          case 65: 
            { return !_typeReq && checkAhead(':') != -1 ? ID : TABLE;
            } 
            // fall through
          case 145: break;
          case 66: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 146: break;
          case 67: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 147: break;
          case 68: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 148: break;
          case 69: 
            { beginType(); return TAG_NAME_VARARG;
            } 
            // fall through
          case 149: break;
          case 70: 
            { if (checkAhead(':') != -1) {
              return ID;
        } else {
              _typeReq = true;
              return VARARG;
        }
            } 
            // fall through
          case 150: break;
          case 71: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 151: break;
          case 72: 
            { nBrackets = yylength() - 7; yybegin(xBODY); return BLOCK_BEGIN;
            } 
            // fall through
          case 152: break;
          case 73: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 153: break;
          case 74: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 154: break;
          case 75: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 155: break;
          case 76: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 156: break;
          case 77: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 157: break;
          case 78: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 158: break;
          case 79: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 159: break;
          case 80: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
