/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>doc.flex</tt>
 */
public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xBODY = 2;
  public static final int xTAG = 4;
  public static final int xTAG_WITH_ID = 6;
  public static final int xTAG_NAME = 8;
  public static final int xCOMMENT_STRING = 10;
  public static final int xPARAM = 12;
  public static final int xTYPE = 14;
  public static final int xCLASS = 16;
  public static final int xCLASS_PARAMS = 18;
  public static final int xCLASS_PARAM_LIST = 20;
  public static final int xCLASS_EXTEND = 22;
  public static final int xFIELD = 24;
  public static final int xFIELD_ID = 26;
  public static final int xFIELD_VALUE = 28;
  public static final int xGENERIC = 30;
  public static final int xALIAS = 32;
  public static final int xALIAS_PARAMS = 34;
  public static final int xALIAS_PARAM_LIST = 36;
  public static final int xSUPPRESS = 38;
  public static final int xDOUBLE_QUOTED_STRING = 40;
  public static final int xSINGLE_QUOTED_STRING = 42;
  public static final int xBACKTICK_QUOTED_STRING = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 18560 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\25\1\61\1\62\5\21\2\25\1\63"+
    "\7\21\1\25\1\64\20\21\1\25\1\65\1\21\1\66\13\25\1\67\2\25\1\70\21\21\1\71"+
    "\1\72\4\21\1\73\11\21\1\74\1\75\1\76\1\77\1\21\1\100\2\21\1\101\1\102\2\21"+
    "\1\103\1\21\1\104\1\105\5\21\1\106\2\21\123\25\1\107\7\25\1\110\1\111\12\25"+
    "\1\112\15\25\1\113\6\21\1\25\1\114\2\21\11\25\1\115\u0576\21\1\116\u017f\21");

  /* The ZZ_CMAP_Y table has 5056 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\5\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24\1\51"+
    "\1\52\1\30\1\53\1\54\1\0\1\55\5\24\1\56\3\0\1\57\1\60\13\24\1\61\1\47\1\62"+
    "\1\63\1\0\1\64\1\30\1\65\1\66\3\24\3\0\1\67\12\24\1\70\1\0\1\71\1\30\1\0\1"+
    "\72\3\24\1\56\1\73\1\74\2\24\1\70\1\75\1\76\1\77\2\30\3\24\1\100\1\24\1\52"+
    "\6\30\2\24\1\33\2\24\1\30\1\101\5\0\1\102\6\24\1\103\2\0\1\104\1\24\1\105"+
    "\1\0\1\43\1\24\1\106\1\107\1\110\2\24\1\111\1\112\1\113\1\114\1\115\1\65\1"+
    "\116\1\105\1\0\1\117\1\120\1\121\1\51\1\110\2\24\1\111\1\122\1\123\1\124\1"+
    "\125\1\126\1\127\1\130\1\0\1\131\1\30\1\121\1\40\1\37\2\24\1\111\1\132\1\113"+
    "\1\47\1\133\1\134\1\30\1\105\1\0\1\44\1\135\1\121\1\107\1\110\2\24\1\111\1"+
    "\132\1\113\1\114\1\125\1\136\1\116\1\105\1\0\1\44\1\30\1\137\1\140\1\141\1"+
    "\142\1\143\1\140\1\24\1\144\1\145\1\146\1\147\1\30\1\130\1\0\1\30\1\44\1\150"+
    "\1\33\1\111\2\24\1\111\1\24\1\151\1\152\1\146\1\153\1\52\1\105\1\0\2\30\1"+
    "\106\1\33\1\111\2\24\1\111\1\154\1\113\1\152\1\146\1\153\1\35\1\105\1\0\1"+
    "\155\1\30\1\102\1\33\1\111\4\24\1\156\1\152\1\157\1\160\1\161\1\105\1\0\1"+
    "\30\1\42\1\121\1\24\1\25\1\42\2\24\1\37\1\162\1\25\1\163\1\164\1\0\1\130\1"+
    "\0\1\165\1\30\1\43\5\24\1\166\1\167\1\170\1\171\1\0\1\172\4\30\1\142\1\173"+
    "\2\24\1\174\1\24\1\166\1\175\1\176\1\53\1\0\1\177\4\30\1\134\2\30\1\172\1"+
    "\0\1\172\1\200\1\201\1\24\1\43\3\24\1\31\1\46\1\0\1\152\1\202\1\0\1\46\3\0"+
    "\1\203\1\204\7\30\5\24\1\56\1\0\1\205\1\0\1\172\1\70\1\206\1\207\1\210\1\211"+
    "\1\24\1\212\1\213\1\0\1\53\4\24\1\40\1\22\5\24\1\173\51\24\1\141\1\25\1\141"+
    "\5\24\1\141\4\24\1\141\1\25\1\141\1\24\1\25\7\24\1\141\10\24\1\214\4\30\2"+
    "\24\2\30\12\24\2\215\1\43\114\24\1\107\2\24\1\216\2\24\1\52\11\24\1\140\1"+
    "\24\1\134\1\24\1\33\1\217\1\30\2\24\1\217\1\30\2\24\1\220\1\30\1\24\1\33\1"+
    "\221\1\30\6\24\1\222\3\0\1\223\1\224\1\0\1\172\3\30\1\225\1\0\1\172\13\24"+
    "\1\134\1\226\4\24\1\227\10\24\1\215\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130\1"+
    "\0\3\24\1\215\1\31\1\30\5\24\1\117\3\24\1\27\1\0\1\172\4\30\2\24\1\170\1\2"+
    "\6\24\1\202\1\171\3\0\1\114\1\0\1\172\1\0\1\172\1\161\1\30\1\0\1\47\1\230"+
    "\7\30\1\150\5\24\1\222\1\0\1\150\1\117\1\0\1\172\1\30\1\101\1\2\1\30\1\231"+
    "\3\24\1\104\1\210\1\0\1\72\4\24\1\70\1\0\1\2\1\30\4\24\1\222\2\0\1\30\1\0"+
    "\1\232\1\0\1\72\3\24\1\215\1\24\1\134\5\24\1\233\2\30\1\234\2\0\1\235\1\236"+
    "\1\237\30\24\7\0\1\240\42\24\2\215\4\24\2\215\1\24\1\241\3\24\1\215\6\24\1"+
    "\33\1\176\1\242\1\31\1\243\1\117\1\24\1\31\1\242\1\31\1\244\1\245\3\30\1\246"+
    "\1\30\1\161\1\134\1\30\1\247\1\250\1\152\1\0\1\44\1\161\2\30\1\24\1\31\4\24"+
    "\2\30\1\0\1\203\1\251\1\0\1\230\1\30\1\252\1\42\1\162\1\253\1\32\1\254\1\24"+
    "\1\255\1\256\1\257\2\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1"+
    "\260\1\261\1\30\4\24\1\40\1\22\7\24\1\161\1\30\1\65\2\24\1\25\1\30\10\25\4"+
    "\0\5\30\1\161\72\30\1\262\3\30\1\43\1\212\1\253\1\31\1\43\11\24\1\25\1\263"+
    "\1\43\12\24\1\173\1\256\5\24\1\43\12\24\1\25\2\30\4\24\6\30\172\24\10\30\77"+
    "\24\1\31\21\24\1\31\10\30\5\24\1\215\41\24\1\31\2\24\1\0\1\261\2\30\5\24\1"+
    "\170\1\264\1\265\3\24\1\70\12\24\1\172\3\30\1\161\1\24\1\42\14\24\1\110\6"+
    "\24\1\42\1\52\4\30\1\256\1\24\1\266\1\267\2\24\1\56\1\270\1\30\1\134\6\24"+
    "\1\117\1\30\1\72\5\24\1\222\1\0\1\53\1\30\1\0\1\172\2\0\1\72\1\271\1\0\1\72"+
    "\2\24\1\70\1\53\2\24\1\170\1\0\1\2\1\30\3\24\1\31\1\102\5\24\1\56\1\0\1\230"+
    "\1\161\1\0\1\172\1\272\1\24\1\0\1\273\5\24\1\104\1\171\1\30\1\267\1\274\1"+
    "\0\1\172\2\24\1\25\1\275\6\24\1\207\1\276\1\227\2\30\1\277\1\24\1\56\1\300"+
    "\1\30\3\301\1\30\2\25\5\24\1\173\1\24\1\27\16\24\1\56\1\302\1\0\1\172\64\24"+
    "\1\117\1\30\2\24\1\25\1\303\5\24\1\117\40\30\55\24\1\215\15\24\1\27\4\30\1"+
    "\25\1\30\1\303\1\304\1\24\1\111\1\25\1\176\1\305\15\24\1\27\3\30\1\303\54"+
    "\24\1\215\2\30\10\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\143\2\30\1\256"+
    "\3\30\1\44\1\33\20\24\1\306\1\247\1\30\1\0\1\172\1\43\2\24\1\51\1\43\2\24"+
    "\1\52\1\307\12\24\1\25\3\42\1\310\1\311\2\30\1\312\1\24\1\154\2\24\1\25\2"+
    "\24\1\313\1\24\1\215\1\24\1\215\4\30\17\24\1\52\10\30\6\24\1\31\20\30\1\314"+
    "\20\30\3\24\1\31\6\24\1\134\1\30\1\230\3\30\4\24\1\30\1\256\3\24\1\52\4\24"+
    "\1\70\1\315\3\24\1\215\4\24\1\117\1\24\1\253\5\30\23\24\1\215\1\0\1\172\4"+
    "\24\1\117\4\24\1\117\5\24\1\30\6\24\1\117\23\30\46\24\1\25\1\30\2\24\1\215"+
    "\1\30\1\24\23\30\1\215\1\111\4\24\1\40\1\316\2\24\1\215\1\30\2\24\1\25\1\30"+
    "\3\24\1\25\10\30\2\24\1\317\1\30\2\24\1\215\1\30\3\24\1\27\10\30\7\24\1\307"+
    "\10\30\1\320\1\264\1\154\1\43\2\24\1\215\1\124\4\30\3\24\1\31\3\24\1\31\4"+
    "\30\1\24\1\43\2\24\1\321\3\30\6\24\1\215\1\30\2\24\1\215\1\30\2\24\1\52\1"+
    "\30\2\24\1\27\15\30\11\24\1\134\6\30\6\24\1\52\1\30\6\24\1\52\1\30\4\24\1"+
    "\222\1\30\1\0\1\172\50\30\5\24\1\322\1\27\11\30\3\24\1\31\1\161\1\30\2\24"+
    "\1\70\1\0\1\230\13\30\2\24\1\31\3\30\2\24\1\25\1\30\1\231\6\24\1\0\1\171\3"+
    "\30\1\130\1\0\1\30\1\65\1\231\5\24\1\0\1\323\1\30\1\314\3\24\1\134\1\0\1\172"+
    "\1\231\3\24\1\170\1\0\1\152\1\0\1\324\1\30\4\24\1\325\1\30\1\231\5\24\1\56"+
    "\1\0\1\326\1\327\1\0\1\330\4\30\2\24\1\37\2\24\1\222\1\0\1\204\10\30\1\25"+
    "\1\254\1\24\1\40\1\24\1\134\5\24\1\170\1\0\1\315\1\0\1\172\1\331\1\107\1\110"+
    "\2\24\1\111\1\132\1\332\1\114\1\125\1\147\1\256\1\105\2\203\21\30\6\24\1\202"+
    "\1\0\1\205\1\52\1\0\1\333\1\27\3\30\6\24\2\0\1\334\1\30\1\0\1\172\24\30\5"+
    "\24\1\170\1\53\1\0\1\230\2\30\1\274\4\30\6\24\2\0\1\335\1\30\1\0\1\172\4\30"+
    "\5\24\1\56\1\0\1\134\1\0\1\172\6\30\3\24\1\214\1\0\1\2\1\0\1\172\30\30\5\24"+
    "\1\222\1\0\1\315\14\30\10\24\1\0\1\172\1\30\1\161\1\25\1\336\1\337\3\24\1"+
    "\47\1\340\1\341\1\30\1\0\1\172\10\30\1\24\1\42\4\24\1\104\1\342\1\343\3\30"+
    "\1\104\1\231\4\24\1\56\1\344\1\65\1\30\1\104\1\102\5\24\1\212\1\0\1\345\4"+
    "\30\7\24\1\134\40\30\1\24\1\111\3\24\1\170\1\171\1\0\1\134\1\30\1\0\1\172"+
    "\2\30\1\42\3\24\1\342\2\0\1\46\1\171\11\30\1\25\1\37\4\24\1\346\1\347\1\213"+
    "\1\30\1\0\1\172\1\40\1\111\3\24\1\350\1\240\1\134\1\0\1\172\46\30\2\24\1\351"+
    "\27\30\1\134\4\30\1\256\1\134\3\30\63\24\1\27\14\30\15\24\1\25\2\30\30\24"+
    "\1\117\27\30\5\24\1\25\1\0\1\230\70\30\10\24\1\25\67\30\7\24\1\134\3\24\1"+
    "\25\1\0\1\172\14\30\3\24\1\215\1\203\1\30\6\24\1\171\1\30\1\117\1\30\1\0\1"+
    "\172\1\303\2\24\1\256\2\24\26\30\10\24\20\30\11\24\1\352\1\104\6\0\1\65\1"+
    "\231\1\24\10\30\1\353\1\30\1\172\1\30\77\24\1\30\32\24\1\215\5\30\1\24\1\134"+
    "\36\30\43\24\1\25\6\30\1\52\1\30\1\354\1\30\61\24\1\117\40\30\15\24\1\52\1"+
    "\24\1\31\1\24\1\134\1\24\1\355\1\2\127\30\1\136\1\356\2\0\1\357\1\2\3\30\1"+
    "\360\22\30\1\361\67\30\12\24\1\33\10\24\1\33\1\362\1\363\1\24\1\364\1\154"+
    "\7\24\1\40\1\233\2\33\3\24\1\365\1\176\1\42\1\111\51\24\1\215\3\24\1\111\2"+
    "\24\1\173\3\24\1\173\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3\24\1\111\3"+
    "\24\1\111\2\24\1\173\1\366\14\0\1\171\1\101\5\0\1\203\1\314\1\30\1\270\2\30"+
    "\1\101\1\46\1\0\52\30\1\171\2\0\1\367\1\370\1\315\32\30\5\24\1\31\1\205\1"+
    "\215\1\0\1\371\56\30\5\24\1\222\1\0\1\372\40\30\30\24\1\31\1\30\1\171\5\30"+
    "\10\24\1\222\1\373\1\0\1\172\52\30\1\134\51\30\1\154\3\24\1\374\1\43\1\173"+
    "\1\375\1\252\1\376\1\374\1\241\1\374\2\173\1\127\1\24\1\37\1\24\1\117\1\377"+
    "\1\37\1\24\1\117\146\30\1\0\1\172\33\24\1\215\4\30\106\24\1\31\1\30\33\24"+
    "\1\215\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\215\74\30\51\24\1\52\26\30"+
    "\1\126\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 2048 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\16\1\3\1\2\1\42\1\43\1\1\6\16\4\15\1\3\1\15\1\13\1\72\1\4\2\15\1\17\1"+
    "\66\1\67\1\15\1\24\1\61\1\7\1\6\1\15\1\26\11\21\1\63\1\15\1\62\1\11\1\64\1"+
    "\15\1\44\4\22\1\23\1\22\5\4\1\31\3\4\1\25\4\4\1\30\2\4\1\27\2\4\1\10\1\14"+
    "\1\12\1\15\1\4\1\20\1\37\1\60\1\53\1\46\1\35\1\36\1\52\1\54\1\45\2\4\1\40"+
    "\1\50\1\56\1\55\1\47\1\4\1\33\1\41\1\32\1\34\1\51\1\4\1\27\1\57\1\4\1\70\1"+
    "\65\1\71\1\15\6\16\1\5\2\16\1\0\1\15\4\4\4\15\1\4\2\15\1\16\7\15\1\4\4\15"+
    "\1\4\5\15\17\4\1\15\2\4\4\15\4\4\16\15\5\4\7\15\1\4\1\15\1\4\1\15\5\4\1\15"+
    "\2\4\2\15\4\4\1\15\1\4\6\15\1\4\1\15\3\4\1\15\1\4\1\15\4\4\1\15\13\4\1\15"+
    "\3\4\1\15\5\16\2\15\6\4\1\15\7\4\1\15\1\4\6\15\1\4\6\15\1\4\1\15\15\16\1\15"+
    "\1\16\1\15\2\16\1\15\2\16\1\15\1\16\3\4\4\15\4\4\5\15\6\16\5\15\1\4\4\15\3"+
    "\16\1\15\1\16\3\15\3\4\7\16\4\15\2\4\1\16\13\4\1\15\1\4\7\16\2\4\2\16\1\15"+
    "\4\16\2\4\2\16\3\4\2\15\1\4\7\15\1\16\1\4\1\16\6\4\3\16\2\15\11\4\3\16\1\4"+
    "\6\15\2\16\6\4\4\16\2\4\4\15\1\4\2\15\1\16\2\4\2\16\1\4\11\16\1\4\3\16\1\4"+
    "\5\16\2\15\1\4\3\16\7\15\11\16\6\4\3\16\1\4\2\16\1\4\7\16\2\4\2\16\2\15\2"+
    "\16\1\4\3\16\1\15\10\4\2\15\2\4\2\15\6\4\1\15\7\4\1\15\1\4\3\15\4\4\2\15\1"+
    "\16\1\4\7\16\2\15\2\16\2\15\3\16\1\4\5\15\2\4\1\15\5\4\7\15\2\4\1\15\1\16"+
    "\2\15\3\16\1\15\4\4\1\15\2\4\1\15\2\4\1\15\2\4\2\15\1\16\1\15\5\16\4\15\2"+
    "\16\2\15\3\16\3\15\1\16\7\15\4\4\1\15\1\4\7\15\4\16\3\4\1\16\2\15\1\4\1\15"+
    "\2\4\1\15\3\4\2\16\1\15\3\16\2\15\1\4\10\15\1\4\6\16\5\15\3\16\2\15\1\16\1"+
    "\4\1\15\6\4\3\15\3\4\1\15\4\4\3\15\2\4\1\15\1\4\1\15\2\4\3\15\2\4\3\15\2\4"+
    "\4\15\5\16\3\15\3\16\1\15\4\16\2\15\1\4\6\15\6\16\5\4\3\15\1\4\7\16\1\15\2"+
    "\16\5\15\2\16\1\15\4\4\1\15\3\4\1\15\2\4\5\15\3\4\2\16\1\4\3\16\1\15\4\16"+
    "\1\4\5\15\3\4\1\16\7\15\5\4\1\15\1\4\4\15\1\16\4\15\6\16\1\15\1\16\3\15\2"+
    "\16\4\15\1\4\1\16\2\4\7\16\4\15\10\4\10\16\1\15\2\16\6\15\3\4\1\15\10\4\1"+
    "\15\1\4\1\15\1\4\5\16\1\4\2\15\5\4\1\15\1\4\1\15\2\16\2\15\4\4\5\15\1\16\1"+
    "\15\1\16\1\15\1\16\4\15\2\16\5\4\10\16\11\15\1\16\1\15\7\16\1\4\2\16\4\4\3"+
    "\16\1\4\3\16\2\4\7\16\3\4\4\16\5\4\14\16\1\4\1\16\3\4\2\15\3\16\6\4\2\15\1"+
    "\0\11\4\3\16\3\15\2\4\2\16\4\15\1\4\1\15\2\16\4\15\4\4\10\16\3\15\1\4\3\15"+
    "\2\4\1\16\5\15\4\16\1\15\5\4\2\16\2\4\1\16\1\4\5\15\1\16\7\15\3\16\5\4\2\16"+
    "\3\15\6\4\2\15\3\4\3\16\1\15\5\16\4\4\1\16\6\4\1\16\2\4\3\16\1\4\5\15\2\16"+
    "\1\15\5\16\1\15\1\4\1\15\1\4\1\15\1\4\1\15\1\4\2\15\3\4\1\15\6\4\2\15\2\4"+
    "\13\0\5\16\2\42\5\16\1\0\4\15\1\4\12\15\1\0\1\15\1\16\3\15\3\16\2\15\1\4\4"+
    "\15\1\4\1\15\5\4\2\15\1\4\1\15\4\4\1\15\3\4\2\15\4\4\5\15\5\4\4\15\1\4\4\15"+
    "\4\4\3\16\2\4\4\15\1\0\4\15\3\4\1\15\2\16\2\15\3\4\4\15\12\16\1\15\3\4\1\16"+
    "\3\4\1\16\4\4\1\16\4\4\4\15\1\16\6\15\1\4\1\15\2\4\1\16\5\4\1\16\2\4\2\16"+
    "\5\4\1\15\4\4\2\16\4\15\1\4\3\16\2\4\1\16\5\4\2\16\3\15\3\4\4\15\3\4\2\16"+
    "\2\15\6\4\1\15\3\16\1\15\2\16\5\15\5\4\5\15\1\4\1\16\3\4\1\15\2\4\1\15\7\4"+
    "\2\15\1\16\6\15\2\4\2\15\3\4\3\15\2\4\3\15\2\4\2\15\3\16\4\15\3\4\1\15\2\4"+
    "\1\15\1\4\5\15\1\16\2\15\3\16\5\15\1\4\3\15\1\4\2\15\4\4\1\15\2\4\2\15\1\4"+
    "\3\16\1\15\2\16\1\15\5\4\2\16\1\15\2\4\1\15\2\16\3\15\3\16\2\15\1\16\6\15"+
    "\1\4\2\16\4\4\1\16\2\15\1\4\1\15\1\16\4\4\4\15\4\16\1\15\4\16\1\4\1\15\1\4"+
    "\3\15\4\16\1\15\5\4\1\15\2\16\1\4\4\16\4\15\1\16\1\4\4\16\2\4\1\15\1\4\1\16"+
    "\3\15\1\4\4\15\1\4\2\15\10\4\1\15\2\4\1\15\1\16\2\15\4\16\1\4\1\16\1\4\2\16"+
    "\6\15\7\16\1\4\1\15\1\4\1\16\3\15\2\16\1\4\4\16\1\15\2\16\3\15\1\4\2\15\1"+
    "\4\6\16\3\15\1\16\1\15\2\16\1\15\1\16\2\4\5\16\1\15\3\4\4\16\1\15\3\4\4\15"+
    "\1\16\2\4\1\15\1\4\1\16\7\15\6\4\3\15\2\16\1\15\2\16\3\15\6\16\2\15\3\16\2"+
    "\15\4\16\4\15\3\16\5\15\1\4\2\15\2\4\2\15\4\4\1\15\4\4\1\15\1\4\1\15\5\4\1"+
    "\15\4\4\1\15\4\4\2\15\3\16\2\15\7\16\1\15\2\16\1\15\4\16\4\15\1\4\1\15\2\16"+
    "\5\15\1\4\3\16\1\4\5\15\2\4\1\15\1\4\2\15\1\4\1\15\1\4\1\15\1\4\5\15\1\4\1"+
    "\15\1\4\1\15\3\4\1\15\3\4\1\15\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\21\0\1\2\1\3\1\2\1\4\2\5"+
    "\1\6\2\4\1\7\1\3\1\10\1\3\1\11\1\12"+
    "\1\13\16\14\1\1\1\6\1\1\1\15\1\3\1\16"+
    "\1\3\1\17\1\20\1\21\1\22\1\23\1\24\2\25"+
    "\3\16\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\15\3\47\2\2\1\50\1\51\1\52"+
    "\1\53\1\54\2\3\1\55\1\3\1\56\1\0\1\57"+
    "\1\0\1\60\21\14\1\60\2\0\3\25\3\0\5\16"+
    "\2\15\1\0\1\61\5\0\6\14\1\62\12\14\1\63"+
    "\1\64\1\65\1\25\1\0\2\25\2\16\1\66\2\16"+
    "\3\15\1\0\1\67\17\14\1\0\1\25\1\0\1\70"+
    "\2\16\3\15\1\0\1\14\1\71\1\72\2\14\1\73"+
    "\3\14\1\74\3\14\1\75\1\14\1\25\1\76\1\16"+
    "\3\15\1\0\1\77\4\14\1\100\1\101\1\102\2\14"+
    "\1\25\1\103\2\15\1\104\1\105\2\14\1\106\1\14"+
    "\1\107\1\14\1\110\1\15\1\111\1\112\1\14\1\113"+
    "\1\15\1\114\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u054d\0\u0588\0\u054d\0\u05c3\0\u054d\0\u05fe\0\u0639\0\u0674"+
    "\0\u054d\0\u05c3\0\u06af\0\u0674\0\u054d\0\u054d\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u054d\0\u054d\0\u0674\0\u054d"+
    "\0\u054d\0\u054d\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u054d"+
    "\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d"+
    "\0\u0d23\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d\0\u054d"+
    "\0\u0d5e\0\u054d\0\u05c3\0\u0674\0\u05c3\0\u0674\0\u0d99\0\u054d"+
    "\0\u054d\0\u054d\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u054d"+
    "\0\u0efb\0\u0639\0\u0674\0\u054d\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u0a5f\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u0e0f\0\u054d\0\u1696"+
    "\0\u0e4a\0\u16d1\0\u0ec0\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u0725\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u0725\0\u054d\0\u054d"+
    "\0\u1af7\0\u1397\0\u054d\0\u1b32\0\u1b6d\0\u1ba8\0\u0b86\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u0725\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u0b86\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u0725\0\u0725\0\u2308\0\u2343\0\u0725\0\u237e\0\u23b9\0\u23f4"+
    "\0\u0725\0\u242f\0\u246a\0\u24a5\0\u0725\0\u24e0\0\u251b\0\u0b86"+
    "\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u0725\0\u267d\0\u26b8"+
    "\0\u26f3\0\u272e\0\u0725\0\u0725\0\u0725\0\u2769\0\u27a4\0\u27df"+
    "\0\u0b86\0\u281a\0\u2855\0\u0b10\0\u2642\0\u2890\0\u28cb\0\u0725"+
    "\0\u2906\0\u0725\0\u2941\0\u0b10\0\u297c\0\u0725\0\u0725\0\u29b7"+
    "\0\u0725\0\u29f2\0\u0725\0\u0b10";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\2\31\2\30\1\31\1\30\1\32\32\30\2\31"+
    "\27\30\1\33\1\34\1\35\1\36\1\33\1\31\1\33"+
    "\1\37\2\33\1\40\27\33\1\31\1\36\1\41\26\33"+
    "\1\31\1\42\1\31\1\36\1\43\5\31\1\44\7\31"+
    "\2\43\1\31\1\43\1\31\13\43\1\31\1\36\1\45"+
    "\14\43\11\31\1\46\1\31\1\34\1\35\1\36\1\47"+
    "\5\31\1\44\7\31\2\47\1\31\1\47\1\31\13\47"+
    "\1\31\1\36\1\31\14\47\13\31\1\42\1\31\1\36"+
    "\1\50\5\31\1\44\7\31\2\50\1\31\1\50\1\31"+
    "\3\50\1\51\1\52\2\50\1\53\1\54\1\55\1\56"+
    "\1\31\1\36\1\31\2\50\1\57\1\60\1\61\1\62"+
    "\1\63\1\50\1\64\1\65\2\50\12\31\1\66\1\34"+
    "\1\35\1\67\6\66\1\70\30\66\1\67\27\66\1\31"+
    "\1\34\1\35\1\36\1\71\1\31\1\72\3\31\1\44"+
    "\7\31\2\71\1\31\1\71\1\31\13\71\1\31\1\36"+
    "\1\31\14\71\13\31\1\34\1\35\1\36\1\73\1\31"+
    "\1\74\1\75\1\76\1\31\1\77\1\100\3\31\1\101"+
    "\1\102\1\103\2\73\1\31\1\73\1\104\3\73\1\105"+
    "\3\73\1\106\3\73\1\31\1\36\1\45\4\73\1\107"+
    "\7\73\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\2\31\1\34\1\35\1\36\1\121\5\31"+
    "\1\44\7\31\2\121\1\31\1\121\1\31\13\121\1\31"+
    "\1\36\1\31\14\121\12\31\62\122\1\123\10\122\3\31"+
    "\1\36\1\43\5\31\1\44\7\31\2\43\1\31\1\43"+
    "\1\31\13\43\1\31\1\36\1\31\14\43\1\124\1\31"+
    "\1\125\1\126\7\31\1\34\1\35\1\36\6\31\1\44"+
    "\30\31\1\36\17\31\1\127\10\31\1\34\1\35\1\36"+
    "\1\71\3\31\1\130\1\31\1\44\7\31\2\71\1\31"+
    "\1\71\1\31\13\71\1\31\1\36\1\31\2\71\1\131"+
    "\11\71\13\31\1\34\1\35\1\36\1\71\3\31\1\130"+
    "\1\31\1\44\7\31\2\71\1\31\1\71\1\31\13\71"+
    "\1\31\1\36\1\31\14\71\12\31\1\132\1\133\1\132"+
    "\1\36\6\132\1\134\30\132\1\36\27\132\1\30\1\135"+
    "\1\30\1\36\1\43\5\30\1\136\7\30\2\43\1\30"+
    "\1\43\1\30\13\43\1\30\1\36\1\30\14\43\1\124"+
    "\1\30\1\127\7\30\1\31\1\34\1\35\1\36\1\137"+
    "\5\31\1\44\7\31\2\137\1\31\1\137\1\31\13\137"+
    "\1\31\1\36\1\31\14\137\12\31\62\132\1\140\10\132"+
    "\3\31\1\36\1\43\5\31\1\44\7\31\2\43\1\31"+
    "\1\43\1\31\13\43\1\31\1\36\1\31\14\43\1\124"+
    "\1\31\1\141\1\142\6\31\1\30\1\135\1\30\1\36"+
    "\1\143\5\30\1\136\7\30\2\143\1\30\1\143\1\30"+
    "\13\143\1\30\1\36\1\30\14\143\1\124\11\30\13\31"+
    "\1\144\76\31\1\145\53\31\14\146\1\147\3\146\1\150"+
    "\52\146\102\0\1\151\65\0\1\35\73\0\1\36\37\0"+
    "\1\36\36\0\1\152\74\0\1\153\1\154\64\0\2\43"+
    "\10\0\1\43\2\0\3\43\1\0\15\43\3\0\14\43"+
    "\16\0\3\47\7\0\1\47\2\0\3\47\1\0\15\47"+
    "\3\0\14\47\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\12\50\1\155\1\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\10\50"+
    "\1\156\4\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\1\157\13\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\13\50\1\160"+
    "\1\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\12\50\1\161\2\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\7\50\1\162"+
    "\1\163\4\50\3\0\7\50\1\164\4\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\6\50\1\165\1\166"+
    "\2\50\1\167\2\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\10\50\1\170"+
    "\3\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\12\50\1\171\2\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\10\50\1\172\4\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\13\50\1\173\1\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\4\50\1\174"+
    "\7\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\10\50\1\175\3\50\12\0\1\66\2\0"+
    "\71\66\2\0\1\67\37\66\1\67\30\66\2\0\6\66"+
    "\1\70\1\176\60\66\4\0\2\71\10\0\1\71\2\0"+
    "\3\71\1\0\15\71\3\0\14\71\20\0\1\177\70\0"+
    "\2\73\10\0\1\73\2\0\3\73\1\0\15\73\3\0"+
    "\14\73\20\0\1\200\12\0\1\201\4\0\1\201\52\0"+
    "\1\202\12\0\1\103\1\0\1\203\2\0\1\103\1\0"+
    "\1\204\1\205\3\0\1\203\43\0\1\202\12\0\1\103"+
    "\1\0\1\203\2\0\1\103\1\206\1\204\1\205\3\0"+
    "\1\203\41\0\2\73\10\0\1\73\2\0\3\73\1\0"+
    "\6\73\1\207\3\73\1\210\2\73\3\0\14\73\16\0"+
    "\2\73\10\0\1\73\2\0\3\73\1\0\7\73\1\211"+
    "\2\73\1\212\2\73\3\0\14\73\16\0\2\73\10\0"+
    "\1\73\2\0\3\73\1\0\12\73\1\213\2\73\3\0"+
    "\14\73\16\0\2\121\10\0\1\121\2\0\3\121\1\0"+
    "\15\121\3\0\14\121\16\0\2\71\10\0\1\71\2\0"+
    "\3\71\1\0\6\71\1\214\1\215\5\71\3\0\14\71"+
    "\16\0\2\137\10\0\1\137\2\0\3\137\1\0\15\137"+
    "\3\0\14\137\16\0\3\143\7\0\1\143\2\0\3\143"+
    "\1\0\15\143\3\0\14\143\12\0\13\216\1\217\1\220"+
    "\56\216\14\221\1\222\2\221\1\217\53\221\14\146\1\223"+
    "\3\146\1\0\52\146\1\0\2\146\1\0\1\146\1\0"+
    "\34\146\2\0\27\146\10\0\1\224\66\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\2\50\1\225"+
    "\11\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\5\50\1\226\7\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\10\50\1\227\4\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\1\230\13\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\11\50\1\231\2\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\2\50\1\232\11\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\10\50\1\233\4\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\12\50"+
    "\1\234\2\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\1\235\7\50\1\236"+
    "\3\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\15\50\3\0\13\50\1\237\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\6\50\1\240\6\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\1\50\1\241\12\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\6\50\1\242\6\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\11\50\1\243\2\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\12\50\1\244\2\50\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\10\50"+
    "\1\245\4\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\5\50\1\246\7\50\3\0\14\50"+
    "\20\0\1\247\72\0\1\250\105\0\1\201\4\0\1\201"+
    "\65\0\1\251\4\0\1\251\53\0\1\252\11\0\1\201"+
    "\2\0\1\252\1\0\1\201\75\0\1\205\72\0\1\253"+
    "\62\0\3\254\2\0\1\254\6\0\3\254\6\0\1\254"+
    "\4\0\1\254\4\0\1\254\16\0\2\73\10\0\1\73"+
    "\2\0\3\73\1\0\7\73\1\255\5\73\3\0\14\73"+
    "\16\0\2\73\10\0\1\73\2\0\3\73\1\0\15\73"+
    "\3\0\13\73\1\256\16\0\2\73\10\0\1\73\2\0"+
    "\3\73\1\0\15\73\3\0\11\73\1\257\2\73\16\0"+
    "\2\73\10\0\1\73\2\0\3\73\1\0\13\73\1\260"+
    "\1\73\3\0\14\73\16\0\2\73\10\0\1\73\2\0"+
    "\3\73\1\0\6\73\1\261\6\73\3\0\14\73\16\0"+
    "\2\71\10\0\1\71\2\0\3\71\1\0\15\71\3\0"+
    "\1\262\7\71\1\263\3\71\16\0\2\71\10\0\1\71"+
    "\2\0\3\71\1\0\15\71\3\0\13\71\1\264\13\0"+
    "\2\216\1\0\1\216\1\0\34\216\2\0\27\216\1\0"+
    "\2\221\1\0\1\221\1\0\34\221\2\0\27\221\10\0"+
    "\1\265\1\224\65\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\10\50\1\266\4\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\7\50\1\267\5\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\13\50\1\270\1\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\12\50\1\271\2\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\5\50\1\272\6\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\15\50\3\0\2\50"+
    "\1\273\11\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\2\50\1\274\11\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\15\50\3\0\4\50"+
    "\1\275\7\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\5\50\1\276\7\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\13\50\1\277\1\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\12\50\1\300\2\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\7\50\1\301\5\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\12\50\1\302\2\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\10\50\1\303\4\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\14\50\1\304\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\6\50\1\305\6\50\3\0"+
    "\14\50\33\0\1\251\1\0\1\203\2\0\1\251\6\0"+
    "\1\203\43\0\1\306\12\0\2\254\1\307\1\0\1\310"+
    "\1\254\1\0\1\204\1\205\3\0\1\307\2\254\6\0"+
    "\1\254\1\310\3\0\1\254\4\0\1\254\16\0\2\73"+
    "\10\0\1\73\2\0\3\73\1\0\10\73\1\311\4\73"+
    "\3\0\14\73\16\0\2\73\10\0\1\73\2\0\3\73"+
    "\1\0\13\73\1\312\1\73\3\0\14\73\16\0\2\73"+
    "\10\0\1\73\2\0\3\73\1\0\14\73\1\255\3\0"+
    "\14\73\16\0\2\73\10\0\1\73\2\0\3\73\1\0"+
    "\12\73\1\313\2\73\3\0\14\73\16\0\2\71\10\0"+
    "\1\71\2\0\3\71\1\0\15\71\3\0\4\71\1\314"+
    "\7\71\16\0\2\71\10\0\1\71\2\0\3\71\1\0"+
    "\5\71\1\315\7\71\3\0\14\71\16\0\2\71\10\0"+
    "\1\71\2\0\3\71\1\0\13\71\1\316\1\71\3\0"+
    "\14\71\21\0\1\317\67\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\6\50\1\320\6\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\1\50\1\321\12\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\14\50\1\322\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\7\50\1\323\5\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\6\50\1\324\6\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\10\50\1\325\4\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\12\50\1\326\2\50\3\0\14\50\16\0\2\50"+
    "\10\0\1\50\2\0\3\50\1\0\10\50\1\327\4\50"+
    "\3\0\14\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\1\330\13\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\15\50\3\0\3\50\1\331"+
    "\10\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\13\50\1\332\1\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\6\50\1\333\6\50\3\0"+
    "\14\50\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\6\50\1\334\6\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\14\50\1\335\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\13\50"+
    "\1\336\1\50\3\0\14\50\33\0\3\337\2\0\1\337"+
    "\6\0\3\337\6\0\1\337\4\0\1\337\4\0\1\337"+
    "\20\0\1\306\1\252\11\0\2\254\1\307\1\252\1\310"+
    "\1\254\1\0\1\204\1\205\3\0\1\307\2\254\6\0"+
    "\1\254\1\310\3\0\1\254\4\0\1\254\21\0\1\252"+
    "\14\0\1\252\52\0\2\73\10\0\1\73\2\0\3\73"+
    "\1\0\10\73\1\340\4\73\3\0\14\73\16\0\2\73"+
    "\10\0\1\73\2\0\3\73\1\0\6\73\1\341\6\73"+
    "\3\0\14\73\16\0\2\71\10\0\1\71\2\0\3\71"+
    "\1\0\12\71\1\342\2\71\3\0\14\71\16\0\2\71"+
    "\10\0\1\71\2\0\3\71\1\0\10\71\1\343\4\71"+
    "\3\0\14\71\16\0\2\71\10\0\1\71\2\0\3\71"+
    "\1\0\15\71\3\0\1\344\13\71\21\0\1\345\67\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\11\50\1\346\2\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\12\50\1\347\2\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\10\50\1\350"+
    "\4\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\5\50\1\351\7\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\6\50\1\352\5\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\6\50\1\353\5\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\10\50\1\354"+
    "\4\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\15\50\3\0\5\50\1\355\6\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\1\356\13\50\16\0\2\50\10\0\1\50\2\0\3\50"+
    "\1\0\15\50\3\0\10\50\1\357\3\50\33\0\2\337"+
    "\1\360\1\0\1\310\1\337\6\0\1\360\2\337\6\0"+
    "\1\337\1\310\3\0\1\337\4\0\1\337\16\0\2\73"+
    "\10\0\1\73\2\0\3\73\1\0\15\73\3\0\5\73"+
    "\1\361\6\73\16\0\2\71\10\0\1\71\2\0\3\71"+
    "\1\0\5\71\1\362\7\71\3\0\14\71\16\0\2\71"+
    "\10\0\1\71\2\0\3\71\1\0\15\71\3\0\6\71"+
    "\1\363\5\71\16\0\2\71\10\0\1\71\2\0\3\71"+
    "\1\0\15\71\3\0\6\71\1\364\5\71\21\0\1\365"+
    "\67\0\2\50\10\0\1\50\2\0\3\50\1\0\15\50"+
    "\3\0\5\50\1\366\6\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\14\50\1\367\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\10\50\1\370"+
    "\4\50\3\0\14\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\5\50\1\371\7\50\3\0\14\50\16\0"+
    "\2\50\10\0\1\50\2\0\3\50\1\0\15\50\3\0"+
    "\6\50\1\372\5\50\16\0\2\50\10\0\1\50\2\0"+
    "\3\50\1\0\12\50\1\373\2\50\3\0\14\50\21\0"+
    "\1\252\11\0\2\337\1\360\1\252\1\310\1\337\6\0"+
    "\1\360\2\337\6\0\1\337\1\310\3\0\1\337\4\0"+
    "\1\337\16\0\2\71\10\0\1\71\2\0\3\71\1\0"+
    "\10\71\1\374\4\71\3\0\14\71\16\0\2\71\10\0"+
    "\1\71\2\0\3\71\1\0\5\71\1\375\7\71\3\0"+
    "\14\71\16\0\2\50\10\0\1\50\2\0\3\50\1\0"+
    "\10\50\1\376\4\50\3\0\14\50\16\0\2\50\10\0"+
    "\1\50\2\0\3\50\1\0\14\50\1\377\3\0\14\50"+
    "\16\0\2\50\10\0\1\50\2\0\3\50\1\0\10\50"+
    "\1\u0100\4\50\3\0\14\50\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\1\50\1\u0101\12\50"+
    "\16\0\2\71\10\0\1\71\2\0\3\71\1\0\10\71"+
    "\1\u0102\4\71\3\0\14\71\16\0\2\50\10\0\1\50"+
    "\2\0\3\50\1\0\15\50\3\0\1\50\1\u0103\12\50"+
    "\16\0\2\71\10\0\1\71\2\0\3\71\1\0\15\71"+
    "\3\0\1\71\1\u0104\12\71\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10797];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\21\0\2\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\26\1\2\11\1\1\3\11"+
    "\5\1\11\11\1\1\7\11\1\1\1\11\5\1\3\11"+
    "\5\1\1\11\1\0\1\1\1\0\1\11\22\1\2\0"+
    "\3\1\3\0\7\1\1\0\1\11\5\0\22\1\2\11"+
    "\1\1\1\0\1\11\11\1\1\0\20\1\1\0\1\1"+
    "\1\0\6\1\1\0\25\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private int _nextState;

    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType(int nextState) {
        yybegin(xTYPE);
        _typeLevel = 0;
        _typeReq = true;
        _nextState = nextState;
    }

    private void beginType() {
        beginType(xBODY);
    }

    private int nBrackets = -1;

    private int checkAhead(char c) {
        int length = this.zzBuffer.length();

        for (int pos = this.zzMarkedPos; pos < length; pos++) {
            char charAhead = zzBuffer.charAt(pos);

            if (charAhead == c) {
                return pos;
            }

            if (charAhead != ' ' && charAhead != '\t' && charAhead != '\f') {
                return -1;
            }
        }

        return -1;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(xBODY); return STRING;
            } 
            // fall through
          case 78: break;
          case 2: 
            { yybegin(xBODY); yypushback(yylength());
            } 
            // fall through
          case 79: break;
          case 3: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 80: break;
          case 4: 
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            } 
            // fall through
          case 81: break;
          case 5: 
            { yybegin(xBODY); return EOL;
            } 
            // fall through
          case 82: break;
          case 6: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 7: 
            { yybegin(xTAG_NAME); return AT;
            } 
            // fall through
          case 84: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 85: break;
          case 9: 
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            } 
            // fall through
          case 86: break;
          case 10: 
            { return SHARP;
            } 
            // fall through
          case 87: break;
          case 11: 
            { yybegin(xCOMMENT_STRING); return PROPERTY;
            } 
            // fall through
          case 88: break;
          case 12: 
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            } 
            // fall through
          case 89: break;
          case 13: 
            { beginType(); return ID;
            } 
            // fall through
          case 90: break;
          case 14: 
            { if (_typeReq || _typeLevel > 0) {
            _typeReq = false;
            return ID;
        } else {
            yybegin(_nextState); yypushback(yylength());
        }
            } 
            // fall through
          case 91: break;
          case 15: 
            { return MINUS;
            } 
            // fall through
          case 92: break;
          case 16: 
            { int closePos = checkAhead(']');
        if (closePos != -1) {
            _typeReq = false;
            zzMarkedPos = closePos + 1;
            return ARR;
        } else {
            _typeLevel++;
            return LBRACK;
        }
            } 
            // fall through
          case 93: break;
          case 17: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return RBRACK;
        }
            } 
            // fall through
          case 94: break;
          case 18: 
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 95: break;
          case 19: 
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            } 
            // fall through
          case 96: break;
          case 20: 
            { yybegin(xBACKTICK_QUOTED_STRING); return BACKTICK;
            } 
            // fall through
          case 97: break;
          case 21: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 98: break;
          case 22: 
            { _typeReq = true; return COMMA;
            } 
            // fall through
          case 99: break;
          case 23: 
            { _typeLevel++; return LT;
            } 
            // fall through
          case 100: break;
          case 24: 
            { _typeReq = true; return EXTENDS;
            } 
            // fall through
          case 101: break;
          case 25: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return GT;
        }
            } 
            // fall through
          case 102: break;
          case 26: 
            { _typeReq = true; return OR;
            } 
            // fall through
          case 103: break;
          case 27: 
            { _typeLevel++; return LPAREN;
            } 
            // fall through
          case 104: break;
          case 28: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return RPAREN;
        }
            } 
            // fall through
          case 105: break;
          case 29: 
            { _typeLevel++; return LCURLY;
            } 
            // fall through
          case 106: break;
          case 30: 
            { if (--_typeLevel < 0) {
            yybegin(_nextState); yypushback(yylength());
        } else {
            _typeReq = false;
            return RCURLY;
        }
            } 
            // fall through
          case 107: break;
          case 31: 
            { yybegin(xCLASS_PARAMS); return ID;
            } 
            // fall through
          case 108: break;
          case 32: 
            { yybegin(xCLASS_EXTEND); yypushback(yylength());
            } 
            // fall through
          case 109: break;
          case 33: 
            { yybegin(xCLASS_PARAM_LIST); return LT;
            } 
            // fall through
          case 110: break;
          case 34: 
            { return COMMA;
            } 
            // fall through
          case 111: break;
          case 35: 
            { beginType(xCLASS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 112: break;
          case 36: 
            { yybegin(xCLASS_EXTEND); return GT;
            } 
            // fall through
          case 113: break;
          case 37: 
            { beginType(); return EXTENDS;
            } 
            // fall through
          case 114: break;
          case 38: 
            { beginType(xFIELD_VALUE); yypushback(yylength());
            } 
            // fall through
          case 115: break;
          case 39: 
            { beginType(); yypushback(yylength());
            } 
            // fall through
          case 116: break;
          case 40: 
            { yybegin(xALIAS_PARAMS); return ID;
            } 
            // fall through
          case 117: break;
          case 41: 
            { yybegin(xALIAS_PARAM_LIST); return LT;
            } 
            // fall through
          case 118: break;
          case 42: 
            { beginType(xALIAS_PARAM_LIST); return EXTENDS;
            } 
            // fall through
          case 119: break;
          case 43: 
            { beginType(); return GT;
            } 
            // fall through
          case 120: break;
          case 44: 
            { return PROPERTY;
            } 
            // fall through
          case 121: break;
          case 45: 
            { return SNIPPET;
            } 
            // fall through
          case 122: break;
          case 46: 
            { yybegin(xTYPE); return BACKTICK;
            } 
            // fall through
          case 123: break;
          case 47: 
            { if (nBrackets == -1) return DASHES;
            } 
            // fall through
          case 124: break;
          case 48: 
            { if (yylength() - 2 == nBrackets) {
            nBrackets = -1;
            return BLOCK_END;
        }
            } 
            // fall through
          case 125: break;
          case 49: 
            { yybegin(xTYPE); return STRING_LITERAL;
            } 
            // fall through
          case 126: break;
          case 50: 
            { yybegin(xTAG); return TAG_NAME_SEE;
            } 
            // fall through
          case 127: break;
          case 51: 
            { beginType(); return TAG_NAME_NOT;
            } 
            // fall through
          case 128: break;
          case 52: 
            { beginType(); return ELLIPSIS;
            } 
            // fall through
          case 129: break;
          case 53: 
            { return ELLIPSIS;
            } 
            // fall through
          case 130: break;
          case 54: 
            { if (!_typeReq && checkAhead(':') != -1) {
              return ID;
        } else {
              _typeReq = false;
              return FUN;
        }
            } 
            // fall through
          case 131: break;
          case 55: 
            { beginType(); return TAG_NAME_TYPE;
            } 
            // fall through
          case 132: break;
          case 56: 
            { return BOOLEAN_LITERAL;
            } 
            // fall through
          case 133: break;
          case 57: 
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            } 
            // fall through
          case 134: break;
          case 58: 
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            } 
            // fall through
          case 135: break;
          case 59: 
            { yybegin(xCLASS); return TAG_NAME_SHAPE;
            } 
            // fall through
          case 136: break;
          case 60: 
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            } 
            // fall through
          case 137: break;
          case 61: 
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            } 
            // fall through
          case 138: break;
          case 62: 
            { return !_typeReq && checkAhead(':') != -1 ? ID : TABLE;
            } 
            // fall through
          case 139: break;
          case 63: 
            { beginType(); return TAG_NAME_RETURN;
            } 
            // fall through
          case 140: break;
          case 64: 
            { return TAG_NAME_PUBLIC;
            } 
            // fall through
          case 141: break;
          case 65: 
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            } 
            // fall through
          case 142: break;
          case 66: 
            { beginType(); return TAG_NAME_VARARG;
            } 
            // fall through
          case 143: break;
          case 67: 
            { if (checkAhead(':') != -1) {
              return ID;
        } else {
              _typeReq = true;
              return VARARG;
        }
            } 
            // fall through
          case 144: break;
          case 68: 
            { yybegin(xFIELD_ID); return PUBLIC;
            } 
            // fall through
          case 145: break;
          case 69: 
            { nBrackets = yylength() - 7; yybegin(xBODY); return BLOCK_BEGIN;
            } 
            // fall through
          case 146: break;
          case 70: 
            { return TAG_NAME_PRIVATE;
            } 
            // fall through
          case 147: break;
          case 71: 
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            } 
            // fall through
          case 148: break;
          case 72: 
            { yybegin(xFIELD_ID); return PRIVATE;
            } 
            // fall through
          case 149: break;
          case 73: 
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            } 
            // fall through
          case 150: break;
          case 74: 
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            } 
            // fall through
          case 151: break;
          case 75: 
            { beginType(); return TAG_NAME_OVERLOAD;
            } 
            // fall through
          case 152: break;
          case 76: 
            { return TAG_NAME_PROTECTED;
            } 
            // fall through
          case 153: break;
          case 77: 
            { yybegin(xFIELD_ID); return PROTECTED;
            } 
            // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
